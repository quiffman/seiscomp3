SC_BEGIN_PACKAGE(CORE trunk)

OPTION(COMPONENT_ESSENTIALS "Build essential package (base of qc, arclink, ...)" ON)
OPTION(COMPONENT_ESSENTIALS_OWN_MSEED "Use included libmseed" ON)
OPTION(COMPONENT_ESSENTIALS_DB_MYSQL "Add MYSQL support" ON)
OPTION(COMPONENT_ESSENTIALS_DB_SQLITE3 "Add SQLite3 support" OFF)
OPTION(COMPONENT_ESSENTIALS_DB_POSTGRESQL "Add PostgreSQL support" OFF)
OPTION(COMPONENT_ESSENTIALS_NUMPY_SUPPORT "Add Numpy support for Python wrapper" OFF)
#OPTION(DB_FIREBIRD "Add Firebird support" OFF)
#OPTION(DB_ORACLE "Add oracle support" OFF)

OPTION(COMPONENT_ESSENTIALS_MASTER "Build communication master module" ON)

IF (COMPONENT_ESSENTIALS)


IF (COMPONENT_ESSENTIALS_DB_MYSQL)
    FIND_PACKAGE(MySQL REQUIRED)
ENDIF (COMPONENT_ESSENTIALS_DB_MYSQL)

IF (COMPONENT_ESSENTIALS_DB_SQLITE3)
    FIND_PACKAGE(SQLite3 REQUIRED)
ENDIF (COMPONENT_ESSENTIALS_DB_SQLITE3)

IF (COMPONENT_ESSENTIALS_DB_POSTGRESQL)
    FIND_PACKAGE(PostgreSQL REQUIRED)
ENDIF (COMPONENT_ESSENTIALS_DB_POSTGRESQL)

IF (COMPONENT_ESSENTIALS_NUMPY_SUPPORT)
	INCLUDE(FindNumpy)
	IF (NOT PYTHON_NUMPY_FOUND)
		MESSAGE(FATAL_ERROR "Python NumPy not found")
	ENDIF (NOT PYTHON_NUMPY_FOUND)
ENDIF (COMPONENT_ESSENTIALS_NUMPY_SUPPORT)

IF(WIN32)
	SET(SPREAD_REQUESTED_VERSION 4.0.1)
	FIND_PACKAGE(SPREAD REQUIRED)
ENDIF(WIN32)

IF (NOT COMPONENT_ESSENTIALS_OWN_MSEED)
	SET(MSEED_REQUESTED_VERSION 2)
	FIND_PACKAGE(MSEED REQUIRED)
	SET(LIBMSEED_INCLUDE_DIR ${MSEED_INCLUDE_DIR})
	SET(LIBMSEED_LIBRARY ${MSEED_LIBRARY})
ELSE (NOT COMPONENT_ESSENTIALS_OWN_MSEED)
	SET(LIBMSEED_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/src/core/libs/3rd-party/libmseed CACHE INTERNAL "")
	SET(LIBMSEED_LIBRARY mseed CACHE INTERNAL "")
	MARK_AS_ADVANCED(MSEED_INCLUDE_DIR MSEED_LIBRARY)
	SET(MSEED_FOUND "YES")
ENDIF (NOT COMPONENT_ESSENTIALS_OWN_MSEED)

# Optional packages
FIND_PACKAGE(Ncurses)
FIND_PACKAGE(Cdio)


INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/libs)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/libs)

IF(COMPONENT_ENVIRONMENT)
    SET(_env_dir_ env)
ENDIF(COMPONENT_ENVIRONMENT)

IF(SWIG_PYTHON_WRAPPERS)
    SET(_swig_dir_ swig)
ENDIF(SWIG_PYTHON_WRAPPERS)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/scenv.sh.template
               ${CMAKE_CURRENT_BINARY_DIR}/env.sh.tpl
               @ONLY)

INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/env.sh.tpl
	DESTINATION ${SC3_PACKAGE_TEMPLATES_DIR})

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/platform.h.in
               ${CMAKE_CURRENT_BINARY_DIR}/libs/seiscomp3/core/platform/platform.h
               @ONLY)

SUBDIRS(data libs apps ${_swig_dir_} ${_env_dir_})

# Enable inclusion of custom projects
IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/addons)
	SUBDIRS(${CMAKE_CURRENT_SOURCE_DIR}/addons)
ENDIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/addons)


ENDIF(COMPONENT_ESSENTIALS)
