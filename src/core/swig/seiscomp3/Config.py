# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4a
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Config', [dirname(__file__)])
        except ImportError:
            import _Config
            return _Config
        if fp is not None:
            try:
                _mod = imp.load_module('_Config', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Config = swig_import_helper()
    del swig_import_helper
else:
    import _Config
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Config.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Config.SwigPyIterator_value(self)
    def incr(self, n = 1): return _Config.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _Config.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Config.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Config.SwigPyIterator_equal(self, *args)
    def copy(self): return _Config.SwigPyIterator_copy(self)
    def next(self): return _Config.SwigPyIterator_next(self)
    def __next__(self): return _Config.SwigPyIterator___next__(self)
    def previous(self): return _Config.SwigPyIterator_previous(self)
    def advance(self, *args): return _Config.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Config.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Config.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Config.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Config.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Config.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Config.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Config.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import Core
class ConfigException(Core.GeneralException):
    __swig_setmethods__ = {}
    for _s in [Core.GeneralException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigException, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.GeneralException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Config.new_ConfigException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Config.delete_ConfigException
    __del__ = lambda self : None;
ConfigException_swigregister = _Config.ConfigException_swigregister
ConfigException_swigregister(ConfigException)

class ConfigOptionNotFoundException(ConfigException):
    __swig_setmethods__ = {}
    for _s in [ConfigException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigOptionNotFoundException, name, value)
    __swig_getmethods__ = {}
    for _s in [ConfigException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigOptionNotFoundException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Config.new_ConfigOptionNotFoundException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Config.delete_ConfigOptionNotFoundException
    __del__ = lambda self : None;
ConfigOptionNotFoundException_swigregister = _Config.ConfigOptionNotFoundException_swigregister
ConfigOptionNotFoundException_swigregister(ConfigOptionNotFoundException)

class ConfigTypeConversionException(ConfigException):
    __swig_setmethods__ = {}
    for _s in [ConfigException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigTypeConversionException, name, value)
    __swig_getmethods__ = {}
    for _s in [ConfigException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigTypeConversionException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Config.new_ConfigTypeConversionException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Config.delete_ConfigTypeConversionException
    __del__ = lambda self : None;
ConfigTypeConversionException_swigregister = _Config.ConfigTypeConversionException_swigregister
ConfigTypeConversionException_swigregister(ConfigTypeConversionException)

class Symbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Symbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Symbol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Config.new_Symbol(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _Config.Symbol_set(self, *args)
    def __eq__(self, *args): return _Config.Symbol___eq__(self, *args)
    def toString(self): return _Config.Symbol_toString(self)
    __swig_setmethods__["name"] = _Config.Symbol_name_set
    __swig_getmethods__["name"] = _Config.Symbol_name_get
    if _newclass:name = _swig_property(_Config.Symbol_name_get, _Config.Symbol_name_set)
    __swig_setmethods__["content"] = _Config.Symbol_content_set
    __swig_getmethods__["content"] = _Config.Symbol_content_get
    if _newclass:content = _swig_property(_Config.Symbol_content_get, _Config.Symbol_content_set)
    __swig_setmethods__["values"] = _Config.Symbol_values_set
    __swig_getmethods__["values"] = _Config.Symbol_values_get
    if _newclass:values = _swig_property(_Config.Symbol_values_get, _Config.Symbol_values_set)
    __swig_setmethods__["uri"] = _Config.Symbol_uri_set
    __swig_getmethods__["uri"] = _Config.Symbol_uri_get
    if _newclass:uri = _swig_property(_Config.Symbol_uri_get, _Config.Symbol_uri_set)
    __swig_setmethods__["comment"] = _Config.Symbol_comment_set
    __swig_getmethods__["comment"] = _Config.Symbol_comment_get
    if _newclass:comment = _swig_property(_Config.Symbol_comment_get, _Config.Symbol_comment_set)
    __swig_setmethods__["stage"] = _Config.Symbol_stage_set
    __swig_getmethods__["stage"] = _Config.Symbol_stage_get
    if _newclass:stage = _swig_property(_Config.Symbol_stage_get, _Config.Symbol_stage_set)
    __swig_destroy__ = _Config.delete_Symbol
    __del__ = lambda self : None;
Symbol_swigregister = _Config.Symbol_swigregister
Symbol_swigregister(Symbol)

class SymbolTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymbolTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SymbolTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Config.new_SymbolTable()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return _Config.SymbolTable_add(self, *args)
    def get(self, *args): return _Config.SymbolTable_get(self, *args)
    def remove(self, *args): return _Config.SymbolTable_remove(self, *args)
    def incrementObjectCount(self): return _Config.SymbolTable_incrementObjectCount(self)
    def decrementObjectCount(self): return _Config.SymbolTable_decrementObjectCount(self)
    def objectCount(self): return _Config.SymbolTable_objectCount(self)
    def toString(self): return _Config.SymbolTable_toString(self)
    def hasFileBeenIncluded(self, *args): return _Config.SymbolTable_hasFileBeenIncluded(self, *args)
    def addToIncludedFiles(self, *args): return _Config.SymbolTable_addToIncludedFiles(self, *args)
    def includesBegin(self): return _Config.SymbolTable_includesBegin(self)
    def includesEnd(self): return _Config.SymbolTable_includesEnd(self)
    def begin(self): return _Config.SymbolTable_begin(self)
    def end(self): return _Config.SymbolTable_end(self)
    __swig_destroy__ = _Config.delete_SymbolTable
    __del__ = lambda self : None;
SymbolTable_swigregister = _Config.SymbolTable_swigregister
SymbolTable_swigregister(SymbolTable)

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Config.new_Config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Config.delete_Config
    __del__ = lambda self : None;
    def readConfig(self, *args): return _Config.Config_readConfig(self, *args)
    def writeConfig(self, *args): return _Config.Config_writeConfig(self, *args)
    def symbolsToString(self): return _Config.Config_symbolsToString(self)
    def visitedFilesToString(self): return _Config.Config_visitedFilesToString(self)
    def getInt(self, *args): return _Config.Config_getInt(self, *args)
    def setInt(self, *args): return _Config.Config_setInt(self, *args)
    def getDouble(self, *args): return _Config.Config_getDouble(self, *args)
    def setDouble(self, *args): return _Config.Config_setDouble(self, *args)
    def getBool(self, *args): return _Config.Config_getBool(self, *args)
    def setBool(self, *args): return _Config.Config_setBool(self, *args)
    def getString(self, *args): return _Config.Config_getString(self, *args)
    def setString(self, *args): return _Config.Config_setString(self, *args)
    def remove(self, *args): return _Config.Config_remove(self, *args)
    def getInts(self, *args): return _Config.Config_getInts(self, *args)
    def setInts(self, *args): return _Config.Config_setInts(self, *args)
    def getDoubles(self, *args): return _Config.Config_getDoubles(self, *args)
    def setDoubles(self, *args): return _Config.Config_setDoubles(self, *args)
    def getBools(self, *args): return _Config.Config_getBools(self, *args)
    def setBools(self, *args): return _Config.Config_setBools(self, *args)
    def getStrings(self, *args): return _Config.Config_getStrings(self, *args)
    def setStrings(self, *args): return _Config.Config_setStrings(self, *args)
    def symbolTable(self): return _Config.Config_symbolTable(self)
    __swig_getmethods__["Instance"] = lambda x: _Config.Config_Instance
    if _newclass:Instance = staticmethod(_Config.Config_Instance)
Config_swigregister = _Config.Config_swigregister
Config_swigregister(Config)

def Config_Instance(*args):
  return _Config.Config_Instance(*args)
Config_Instance = _Config.Config_Instance

class Environment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Environment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Environment, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    CS_UNDEFINED = _Config.Environment_CS_UNDEFINED
    CS_FIRST = _Config.Environment_CS_FIRST
    CS_DEFAULT_GLOBAL = _Config.Environment_CS_DEFAULT_GLOBAL
    CS_DEFAULT_APP = _Config.Environment_CS_DEFAULT_APP
    CS_CONFIG_GLOBAL = _Config.Environment_CS_CONFIG_GLOBAL
    CS_CONFIG_APP = _Config.Environment_CS_CONFIG_APP
    CS_USER_GLOBAL = _Config.Environment_CS_USER_GLOBAL
    CS_USER_APP = _Config.Environment_CS_USER_APP
    CS_LAST = _Config.Environment_CS_LAST
    CS_QUANTITY = _Config.Environment_CS_QUANTITY
    __swig_destroy__ = _Config.delete_Environment
    __del__ = lambda self : None;
    __swig_getmethods__["Instance"] = lambda x: _Config.Environment_Instance
    if _newclass:Instance = staticmethod(_Config.Environment_Instance)
    def homeDir(self): return _Config.Environment_homeDir(self)
    def configDir(self): return _Config.Environment_configDir(self)
    def appConfigDir(self): return _Config.Environment_appConfigDir(self)
    def globalConfigDir(self): return _Config.Environment_globalConfigDir(self)
    def installDir(self): return _Config.Environment_installDir(self)
    def shareDir(self): return _Config.Environment_shareDir(self)
    def logDir(self): return _Config.Environment_logDir(self)
    def archiveFileName(self, *args): return _Config.Environment_archiveFileName(self, *args)
    def configFileName(self, *args): return _Config.Environment_configFileName(self, *args)
    def appConfigFileName(self, *args): return _Config.Environment_appConfigFileName(self, *args)
    def globalConfigFileName(self, *args): return _Config.Environment_globalConfigFileName(self, *args)
    def logFile(self, *args): return _Config.Environment_logFile(self, *args)
    def absolutePath(self, *args): return _Config.Environment_absolutePath(self, *args)
    def configFileLocation(self, *args): return _Config.Environment_configFileLocation(self, *args)
    def initConfig(self, *args): return _Config.Environment_initConfig(self, *args)
Environment_swigregister = _Config.Environment_swigregister
Environment_swigregister(Environment)

def Environment_Instance():
  return _Config.Environment_Instance()
Environment_Instance = _Config.Environment_Instance

class vectorStr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorStr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorStr, name)
    __repr__ = _swig_repr
    def iterator(self): return _Config.vectorStr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Config.vectorStr___nonzero__(self)
    def __bool__(self): return _Config.vectorStr___bool__(self)
    def __len__(self): return _Config.vectorStr___len__(self)
    def pop(self): return _Config.vectorStr_pop(self)
    def __getslice__(self, *args): return _Config.vectorStr___getslice__(self, *args)
    def __setslice__(self, *args): return _Config.vectorStr___setslice__(self, *args)
    def __delslice__(self, *args): return _Config.vectorStr___delslice__(self, *args)
    def __delitem__(self, *args): return _Config.vectorStr___delitem__(self, *args)
    def __getitem__(self, *args): return _Config.vectorStr___getitem__(self, *args)
    def __setitem__(self, *args): return _Config.vectorStr___setitem__(self, *args)
    def append(self, *args): return _Config.vectorStr_append(self, *args)
    def empty(self): return _Config.vectorStr_empty(self)
    def size(self): return _Config.vectorStr_size(self)
    def clear(self): return _Config.vectorStr_clear(self)
    def swap(self, *args): return _Config.vectorStr_swap(self, *args)
    def get_allocator(self): return _Config.vectorStr_get_allocator(self)
    def begin(self): return _Config.vectorStr_begin(self)
    def end(self): return _Config.vectorStr_end(self)
    def rbegin(self): return _Config.vectorStr_rbegin(self)
    def rend(self): return _Config.vectorStr_rend(self)
    def pop_back(self): return _Config.vectorStr_pop_back(self)
    def erase(self, *args): return _Config.vectorStr_erase(self, *args)
    def __init__(self, *args): 
        this = _Config.new_vectorStr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Config.vectorStr_push_back(self, *args)
    def front(self): return _Config.vectorStr_front(self)
    def back(self): return _Config.vectorStr_back(self)
    def assign(self, *args): return _Config.vectorStr_assign(self, *args)
    def resize(self, *args): return _Config.vectorStr_resize(self, *args)
    def insert(self, *args): return _Config.vectorStr_insert(self, *args)
    def reserve(self, *args): return _Config.vectorStr_reserve(self, *args)
    def capacity(self): return _Config.vectorStr_capacity(self)
    __swig_destroy__ = _Config.delete_vectorStr
    __del__ = lambda self : None;
vectorStr_swigregister = _Config.vectorStr_swigregister
vectorStr_swigregister(vectorStr)

class vectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _Config.vectorInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Config.vectorInt___nonzero__(self)
    def __bool__(self): return _Config.vectorInt___bool__(self)
    def __len__(self): return _Config.vectorInt___len__(self)
    def pop(self): return _Config.vectorInt_pop(self)
    def __getslice__(self, *args): return _Config.vectorInt___getslice__(self, *args)
    def __setslice__(self, *args): return _Config.vectorInt___setslice__(self, *args)
    def __delslice__(self, *args): return _Config.vectorInt___delslice__(self, *args)
    def __delitem__(self, *args): return _Config.vectorInt___delitem__(self, *args)
    def __getitem__(self, *args): return _Config.vectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _Config.vectorInt___setitem__(self, *args)
    def append(self, *args): return _Config.vectorInt_append(self, *args)
    def empty(self): return _Config.vectorInt_empty(self)
    def size(self): return _Config.vectorInt_size(self)
    def clear(self): return _Config.vectorInt_clear(self)
    def swap(self, *args): return _Config.vectorInt_swap(self, *args)
    def get_allocator(self): return _Config.vectorInt_get_allocator(self)
    def begin(self): return _Config.vectorInt_begin(self)
    def end(self): return _Config.vectorInt_end(self)
    def rbegin(self): return _Config.vectorInt_rbegin(self)
    def rend(self): return _Config.vectorInt_rend(self)
    def pop_back(self): return _Config.vectorInt_pop_back(self)
    def erase(self, *args): return _Config.vectorInt_erase(self, *args)
    def __init__(self, *args): 
        this = _Config.new_vectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Config.vectorInt_push_back(self, *args)
    def front(self): return _Config.vectorInt_front(self)
    def back(self): return _Config.vectorInt_back(self)
    def assign(self, *args): return _Config.vectorInt_assign(self, *args)
    def resize(self, *args): return _Config.vectorInt_resize(self, *args)
    def insert(self, *args): return _Config.vectorInt_insert(self, *args)
    def reserve(self, *args): return _Config.vectorInt_reserve(self, *args)
    def capacity(self): return _Config.vectorInt_capacity(self)
    __swig_destroy__ = _Config.delete_vectorInt
    __del__ = lambda self : None;
vectorInt_swigregister = _Config.vectorInt_swigregister
vectorInt_swigregister(vectorInt)

class vectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorDouble, name)
    __repr__ = _swig_repr
    def iterator(self): return _Config.vectorDouble_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Config.vectorDouble___nonzero__(self)
    def __bool__(self): return _Config.vectorDouble___bool__(self)
    def __len__(self): return _Config.vectorDouble___len__(self)
    def pop(self): return _Config.vectorDouble_pop(self)
    def __getslice__(self, *args): return _Config.vectorDouble___getslice__(self, *args)
    def __setslice__(self, *args): return _Config.vectorDouble___setslice__(self, *args)
    def __delslice__(self, *args): return _Config.vectorDouble___delslice__(self, *args)
    def __delitem__(self, *args): return _Config.vectorDouble___delitem__(self, *args)
    def __getitem__(self, *args): return _Config.vectorDouble___getitem__(self, *args)
    def __setitem__(self, *args): return _Config.vectorDouble___setitem__(self, *args)
    def append(self, *args): return _Config.vectorDouble_append(self, *args)
    def empty(self): return _Config.vectorDouble_empty(self)
    def size(self): return _Config.vectorDouble_size(self)
    def clear(self): return _Config.vectorDouble_clear(self)
    def swap(self, *args): return _Config.vectorDouble_swap(self, *args)
    def get_allocator(self): return _Config.vectorDouble_get_allocator(self)
    def begin(self): return _Config.vectorDouble_begin(self)
    def end(self): return _Config.vectorDouble_end(self)
    def rbegin(self): return _Config.vectorDouble_rbegin(self)
    def rend(self): return _Config.vectorDouble_rend(self)
    def pop_back(self): return _Config.vectorDouble_pop_back(self)
    def erase(self, *args): return _Config.vectorDouble_erase(self, *args)
    def __init__(self, *args): 
        this = _Config.new_vectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Config.vectorDouble_push_back(self, *args)
    def front(self): return _Config.vectorDouble_front(self)
    def back(self): return _Config.vectorDouble_back(self)
    def assign(self, *args): return _Config.vectorDouble_assign(self, *args)
    def resize(self, *args): return _Config.vectorDouble_resize(self, *args)
    def insert(self, *args): return _Config.vectorDouble_insert(self, *args)
    def reserve(self, *args): return _Config.vectorDouble_reserve(self, *args)
    def capacity(self): return _Config.vectorDouble_capacity(self)
    __swig_destroy__ = _Config.delete_vectorDouble
    __del__ = lambda self : None;
vectorDouble_swigregister = _Config.vectorDouble_swigregister
vectorDouble_swigregister(vectorDouble)

class vectorComplexD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorComplexD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorComplexD, name)
    __repr__ = _swig_repr
    def iterator(self): return _Config.vectorComplexD_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Config.vectorComplexD___nonzero__(self)
    def __bool__(self): return _Config.vectorComplexD___bool__(self)
    def __len__(self): return _Config.vectorComplexD___len__(self)
    def pop(self): return _Config.vectorComplexD_pop(self)
    def __getslice__(self, *args): return _Config.vectorComplexD___getslice__(self, *args)
    def __setslice__(self, *args): return _Config.vectorComplexD___setslice__(self, *args)
    def __delslice__(self, *args): return _Config.vectorComplexD___delslice__(self, *args)
    def __delitem__(self, *args): return _Config.vectorComplexD___delitem__(self, *args)
    def __getitem__(self, *args): return _Config.vectorComplexD___getitem__(self, *args)
    def __setitem__(self, *args): return _Config.vectorComplexD___setitem__(self, *args)
    def append(self, *args): return _Config.vectorComplexD_append(self, *args)
    def empty(self): return _Config.vectorComplexD_empty(self)
    def size(self): return _Config.vectorComplexD_size(self)
    def clear(self): return _Config.vectorComplexD_clear(self)
    def swap(self, *args): return _Config.vectorComplexD_swap(self, *args)
    def get_allocator(self): return _Config.vectorComplexD_get_allocator(self)
    def begin(self): return _Config.vectorComplexD_begin(self)
    def end(self): return _Config.vectorComplexD_end(self)
    def rbegin(self): return _Config.vectorComplexD_rbegin(self)
    def rend(self): return _Config.vectorComplexD_rend(self)
    def pop_back(self): return _Config.vectorComplexD_pop_back(self)
    def erase(self, *args): return _Config.vectorComplexD_erase(self, *args)
    def __init__(self, *args): 
        this = _Config.new_vectorComplexD(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Config.vectorComplexD_push_back(self, *args)
    def front(self): return _Config.vectorComplexD_front(self)
    def back(self): return _Config.vectorComplexD_back(self)
    def assign(self, *args): return _Config.vectorComplexD_assign(self, *args)
    def resize(self, *args): return _Config.vectorComplexD_resize(self, *args)
    def insert(self, *args): return _Config.vectorComplexD_insert(self, *args)
    def reserve(self, *args): return _Config.vectorComplexD_reserve(self, *args)
    def capacity(self): return _Config.vectorComplexD_capacity(self)
    __swig_destroy__ = _Config.delete_vectorComplexD
    __del__ = lambda self : None;
vectorComplexD_swigregister = _Config.vectorComplexD_swigregister
vectorComplexD_swigregister(vectorComplexD)

# This file is compatible with both classic and new-style classes.


