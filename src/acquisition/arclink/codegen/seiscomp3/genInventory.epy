## ***************************************************************************** 
## genwrap.epy: cheetah template file
##
## generates seiscomp3-based inventory and routing wrapper python code
##
## (c) 2010 Mathias Hoffmann, GFZ Potsdam
##
## This program is free software; you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by the
## Free Software Foundation; either version 2, or (at your option) any later
## version. For more information, see http://www.gnu.org/
## *****************************************************************************
##
## 2010.013
##
## package: $rootElement
##class base_${classInfo.Name.lower}(_TrackedObject):
##
##
##
##if $classInfo.hasAttributes
## $rootElement::$classInfo.Name
# ---------------------------------------------------------------------------------------
#if $rootElement == $classInfo.Name()
class $classInfo.Name()(object):
#else
class _$classInfo.Name()(_genwrap.base_${config.convertToUnderline($classInfo.Name())}):
#end if
#set $parent = ""
#if $classInfo.hasParent()
	#for $c in $classInfo.getParents()
		#if $c.hasParent()
			#set $parent = $config.convertToUnderline($c.Name())
			#break
		#end if
	#end for
#end if
##if $parent != "" and $classInfo.hasIndex
#if $classInfo.hasIndex
	def __init__(self, my${parent}, $config.convertToUnderline($classInfo.getIndexNames()), args):
		#if $rootElement != $classInfo.Name()
		_genwrap.base_${config.convertToUnderline($classInfo.Name())}.__init__(self)
		#end if
		self.__dict__.update(args)
		self.__dict__['my${parent}'] = my${parent}
#elif  $classInfo.hasAttributes and $classInfo.hasIndex
	def __init__(self, $classInfo.getIndexNames(), args):
		#if $rootElement != $classInfo.Name()
		_genwrap.base_${config.convertToUnderline($classInfo.Name())}.__init__(self)
		#end if
		self.__dict__.update(args)
#else
	def __init__(self):
		#if $rootElement != $classInfo.Name()
		_genwrap.base_${config.convertToUnderline($classInfo.Name())}.__init__(self)
		#end if
#end if
#for $attribute in $classInfo.getIndexAttributes()
		self.__dict__['$config.convertToUnderline($attribute.Name())'] = $config.convertToUnderline($attribute.Name())
#end for
		self.__dict__['object'] = {}
##end if   ## from hasAttributes
##
##
##
#if $classInfo.hasElements() or $classInfo.hasParent()
#if $classInfo.hasElements
#for $child in $classInfo.getElements()
		self.__dict__['$config.convertToUnderline($classInfo.getElementRole($child))'] = {}
		## $config.convertToUnderline($child.Name()) = ""
#end for
#end if
#end if
##
##
#if $classInfo.hasElements() or $classInfo.hasParent()
#if $classInfo.hasElements
#for $child in $classInfo.getElements()
	#set $indexList = $child.getIndexNames()

	def insert_${config.convertToUnderline($classInfo.getElementRole($child))}(self, $indexList, **args):
		#set $count = 1
		#if $child.getIndexAttributeCount() == 1
		if $config.convertToUnderline($child.getIndexAttributes()[0].Name()) in self.${config.convertToUnderline($classInfo.getElementRole($child))}:
			raise DBError, "${config.convertToUnderline($child.Name())} %s already defined" % $config.convertToUnderline($child.getIndexAttributes()[0].Name())
		#else
		#set $pre = ""
		#for $attribute in $child.getIndexAttributes()
		#if $count == 1
		if $config.convertToUnderline($attribute.Name()) not in self.${config.convertToUnderline($classInfo.getElementRole($child))}:
			self.${config.convertToUnderline($classInfo.getElementRole($child))}[$config.convertToUnderline($attribute.Name())] = {}
		#elif $count != $child.getIndexAttributeCount()
		if $config.convertToUnderline($attribute.Name()) not in self.$config.convertToUnderline($classInfo.getElementRole($child))$pre:
			self.${config.convertToUnderline($classInfo.getElementRole($child))}${pre}[${config.convertToUnderline($attribute.Name())}] = {}
		#else
		if ${config.convertToUnderline($attribute.Name())} in self.$config.convertToUnderline($classInfo.getElementRole($child))$pre:
			raise DBError, "${config.convertToUnderline($child.Name())} ${child.getIndexNames2(True)} already defined" % (${child.getIndexNames()})
		#end if
		#set $count += 1
		#set $pre += "[%s]" % $config.convertToUnderline($attribute.Name())
		#end for
		#end if
		obj = _${child.Name()}(self, ${child.getIndexNames()}, args)
		self.${config.convertToUnderline($classInfo.getElementRole($child))}${child.getIndexNames2()} = obj
		#if $child.isPublicType()
		self.object[obj.publicID] = obj
		#end if
		return obj
		##
		##
	def remove_${config.convertToUnderline($classInfo.getElementRole($child))}(self, $indexList):
		try:
		#if $child.getIndexAttributeCount() == 1
			del self.${config.convertToUnderline($classInfo.getElementRole($child))}$child.getIndexNames2()
		#else
			del self.${config.convertToUnderline($classInfo.getElementRole($child))}$child.getIndexNames2()
		#set $count = -1
		#for $attribute in $child.getIndexAttributes()[:-1]
			if len(self.${config.convertToUnderline($classInfo.getElementRole($child))}$child.getIndexNames2(end=$count)) == 0:
				del self.${config.convertToUnderline($classInfo.getElementRole($child))}$child.getIndexNames2(end=$count)
		#set $count -= 1
		#end for
		#end if
		except KeyError:
			raise DBError, "${config.convertToUnderline($child.Name())} ${child.getIndexNames2(True)} not found" % (${child.getIndexNames()})
	## $config.convertToUnderline($child.Name()) = ""
#end for
#end if
#end if
#if $classInfo.Name() == "Inventory"

	def clear_instruments(self):
		#for $child in $classInfo.getElements()
		#if $child.Name() != "Network"
		self.${config.convertToUnderline($classInfo.getElementRole($child))} = {}
		#end if
		#end for

	def clear_stations(self):
		self.network = {}

	def load_xml(self, src):
		_xmlio.xml_in(self, src)

	def save_xml(self, dest, instr=0, modified_after=None, stylesheet=None):
		_xmlio.xml_out(self, dest, instr, modified_after, stylesheet)

	def make_parser(self):
		return _xmlio.make_parser(self)
#end if
#if $classInfo.Name() == "Routing"

	def clear_routes(self):
		self.route = {}

	def clear_access(self):
		self.access = {}
	
	def load_xml(self, src, use_access=False):
		_xmlio.xml_in(self, src, use_access)

	def save_xml(self, dest, use_access=False, modified_after=None, stylesheet=None):
		_xmlio.xml_out(self, dest, use_access, modified_after, stylesheet)

	def make_parser(self):
		return _xmlio.make_parser(self)

#end if
#if $classInfo.Name() == "QualityControl"

	def clear_logs(self):
		self.qclog = {}

	def clear_outages(self):
		self.outage = {}
	
	def clear_waveform_quality(self):
		self.waveform_quality = {}
	
	def load_xml(self, src):
		_xmlio.xml_in(self, src)

	def save_xml(self, dest, modified_after=None, stylesheet=None):
		_xmlio.xml_out(self, dest, modified_after, stylesheet)

	def make_parser(self):
		return _xmlio.make_parser(self)
#end if
# ---------------------------------------------------------------------------------------




