## ***************************************************************************** 
## xmlwrap.epy: cheetah template file
##
## generates seiscomp3-based inventory and routing wrapper python code
##
## (c) 2010 Mathias Hoffmann, GFZ Potsdam
##
## This program is free software; you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by the
## Free Software Foundation; either version 2, or (at your option) any later
## version. For more information, see http://www.gnu.org/
## *****************************************************************************
##
## 2010.013
##
## package: $rootElement
##class base_${classInfo.Name.lower}(_TrackedObject):


# $rootElement::$classInfo.Name
class xml_$config.convertToUnderline($classInfo.Name())(object):
    _xmlns = "{http://geofon.gfz-potsdam.de/ns/${rootElement}/1.0/}"
    def __init__(self, e = None):
        if e is None:
            self._element = ET.Element(xml_${config.convertToUnderline($classInfo.Name())}._xmlns + "$config.decapitalizeFirst($classInfo.Name())")
        else:
            self._element = e

    def _append_child(self, obj):
        self._element.append(obj._element)

    def _copy_from(self, src):
#if $classInfo.hasAttributes
#for $attribute in $classInfo.getAttributes()
#if $attribute.Name() != "lastModified"
    #if $config.translateReturnAttrib($attribute, True) == "WaveformStreamID"
        self.networkCode = src.networkCode
        self.stationCode = src.stationCode
        self.streamCode = src.streamCode
        self.locationCode = src.locationCode
    #else
    ## $config.translateReturnAttrib($attribute, True) 
        self.$config.convertToUnderline($attribute.Name()) = src.$config.convertToUnderline($attribute.Name())
    #end if
#end if
#end for
#if $classInfo.isPublicType()
        self.publicID = src.publicID
#end if
#else
        pass

#end if
##

    def _copy_to(self, dest):
#if $classInfo.hasAttributes
#for $attribute in $classInfo.getAttributes()
#if $attribute.Name() != "lastModified"
    #if $config.translateReturnAttrib($attribute, True) == "WaveformStreamID"
        if self._element.get("networkCode") is not None:
            dest.networkCode = self.networkCode
        if self._element.get("stationCode") is not None:
            dest.stationCode = self.stationCode
        if self._element.get("streamCode") is not None:
            dest.streamCode = self.streamCode
        if self._element.get("locationCode") is not None:
            dest.locationCode = self.locationCode
    #else if $config.translateReturnAttrib($attribute, True) == "Blob" or $config.translateReturnAttrib($attribute, True) == "ComplexArray" or $config.translateReturnAttrib($attribute, True) == "RealArray"
        if self._element.find(xml_${config.convertToUnderline($classInfo.Name())}._xmlns + "$config.convertToUnderline($attribute.Name())") is not None:
            dest.$config.convertToUnderline($attribute.Name()) = self.$config.convertToUnderline($attribute.Name())
    #else
    ## $config.translateReturnAttrib($attribute, True)
        if self._element.get("$config.convertToUnderline($attribute.Name())") is not None:
            dest.$config.convertToUnderline($attribute.Name()) = self.$config.convertToUnderline($attribute.Name())
    #end if
#end if
#end for
#if $classInfo.isPublicType()
        if self._element.get("publicID") is not None:
            dest.publicID = self.publicID
#end if
#else
        pass
#end if
##
#if $classInfo.isPublicType()

    @Property
    def publicID():
        def fget(self):
            return _string_fromxml(self._element.get("publicID"))
        def fset(self, value):
            self._element.set("publicID", _string_toxml(value))
        return locals()
#end if

    @Property
    def action():
        def fget(self):
            return _string_fromxml(self._element.get("action"))
        def fset(self, value):
            self._element.set("action", _string_toxml(value))
        return locals()
#if $classInfo.hasAttributes
#for $attribute in $classInfo.getAttributes()
#if $attribute.Name() != "lastModified"
    #if $config.translateReturnAttrib($attribute, True) == "WaveformStreamID"

    @Property
    def networkCode():
        def fget(self):
            return _string_fromxml(self._element.get("networkCode"))
        def fset(self, value):
            self._element.set("networkCode", _string_toxml(value))
        return locals()

    @Property
    def stationCode():
        def fget(self):
            return _string_fromxml(self._element.get("stationCode"))
        def fset(self, value):
            self._element.set("stationCode", _string_toxml(value))
        return locals()

    @Property
    def streamCode():
        def fget(self):
            return _string_fromxml(self._element.get("streamCode"))
        def fset(self, value):
            self._element.set("streamCode", _string_toxml(value))
        return locals()

    @Property
    def locationCode():
        def fget(self):
            return _string_fromxml(self._element.get("locationCode"))
        def fset(self, value):
            self._element.set("locationCode", _string_toxml(value))
        return locals()
    #else

    @Property
    def $config.convertToUnderline($attribute.Name())():
    # type: $attribute.type
    #if $attribute.type == "Blob" or $attribute.type == "ComplexArray" or $attribute.type == "RealArray"
        def fget(self):
            return _get_blob(self._element, xml_${classInfo.Name}._xmlns + "$config.convertToUnderline($attribute.Name())")
        def fset(self, value):
            _set_blob(self._element, xml_${classInfo.Name}._xmlns + "$config.convertToUnderline($attribute.Name())", value)
        return locals()
    #else
        def fget(self):
            return _${$attribute.type}_fromxml(self._element.get("$config.convertToUnderline($attribute.Name())"))
        def fset(self, value):
            self._element.set("$config.convertToUnderline($attribute.Name())", _${$attribute.type}_toxml(value))
        return locals()
    #end if
    #end if
#end if
#end for
#end if
##
##
##
##
##
#if $classInfo.hasElements() or $classInfo.hasParent()
#if $classInfo.hasElements
#for $child in $classInfo.getElements()

    # Aggregation: $child.Name()
    def _new_$classInfo.getElementRole($child)(self):
        return xml_$config.convertToUnderline($child.Name())(ET.Element(xml_${config.convertToUnderline($child.Name())}._xmlns + "$config.convertToUnderline($classInfo.getElementRole($child))"))
    @property
    def $classInfo.getElementRole($child)(self):
        for e1 in self._element.findall(xml_${config.convertToUnderline($child.Name())}._xmlns + "$config.convertToUnderline($classInfo.getElementRole($child))"):
            yield xml_$config.convertToUnderline($child.Name())(e1)
#end for
#end if
#end if
