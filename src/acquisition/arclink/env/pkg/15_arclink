#!/bin/bash

if [ -z "$SEISCOMP_ROOT" ]; then
    echo "SEISCOMP_ROOT is not defined"
    exit 1
fi

pkgname="arclink"
PKGROOT="$SEISCOMP_ROOT/$pkgname"

if ! cd "$PKGROOT"; then
    echo "Cannot change directory to $PKGROOT"
    exit 1
fi

if [ ! -r "$SEISCOMP_ROOT/lib/env.sh" ]; then
    echo "Cannot read $SEISCOMP_ROOT/lib/env.sh"
    exit 1
fi

source "$SEISCOMP_ROOT/lib/env.sh"

if [ ! -r "$SEISCOMP_ROOT/lib/keyutils.sh" ]; then
    echo "Cannot read $SEISCOMP_ROOT/lib/keyutils.sh"
    exit 1
fi

source "$SEISCOMP_ROOT/lib/keyutils.sh"

global_cfg="$(GetTemplate global.cfg)"
if [ ! -r "$global_cfg" ]; then
    echo "Cannot read $PKGROOT/$global_cfg!"
    exit 1
fi

station_cfg="$(GetTemplate station.cfg)"
if [ ! -r "$station_cfg" ]; then
    echo "Cannot read $PKGROOT/$station_cfg!"
    exit 1
fi

export PATH="$PKGROOT/bin:$PATH"

KEY_VERSION="2.5"

_init_keys() {
    source "$SEISCOMP_ROOT/key/global"
    if [ "$CONFIG_STYLE" = arclink ]; then
        ARCLINK="yes"
    else
        ARCLINK="no"
    fi

    mkdir -p key

    MASTER_NODE="webdc.eu:18001"
    SYNC_TIME="$(printf "%02d:%02d" $((RANDOM/1366)) $((RANDOM/547)))"
    ROUTE_SEEDLINK="geofon.gfz-potsdam.de:18000"
    ROUTE_ARCLINK="webdc.eu:18001"
    ACCESS=""
    MAX_DATA_SIZE="500"
    ADMINPASS=""
    ENCRYPTION="false"
}

_edit_globals() {
    _init_keys
    
    if [ -f "key/global" ]; then
        source key/global
    fi

    Ask ARCLINK "Enable local ArcLink" "$ARCLINK"

    if [ "$CONFIG_STYLE" = arclink ]; then
        Ask MASTER_NODE "Master ArcLink node for DB synchronization" "$MASTER_NODE"
        Ask SYNC_TIME "Time of DB synchronization" "$SYNC_TIME"
        Ask MAX_DATA_SIZE "Maximum size of data product (MB)" "$MAX_DATA_SIZE"
        Ask ADMINPASS "ArcLink admin password" "$ADMINPASS"
        Ask ENCRYPTION "Enable arclink encryption (true/false)" "$ENCRYPTION"
    else
        MASTER_NODE=""
        SYNC_TIME=""
        MAX_DATA_SIZE="500"
        ADMINPASS="test123"
        ENCRYPTION="false"
    fi
    
    OutputKeys $global_cfg >key/global
}

_edit_keys() {
    _init_keys
    
    if [ -f "$keyfile" ]; then
        source "$keyfile"
    fi
    
    Ask ROUTE_SEEDLINK "Public SeedLink servers (comma separated, decreasing priority)" "$ROUTE_SEEDLINK"
    Ask ROUTE_ARCLINK "Public ArcLink servers (comma separated, decreasing priority)" "$ROUTE_ARCLINK"
    Ask ACCESS "Users allowed to access the data via ArcLink (leave empty if no restrictions)" "$ACCESS"

    OutputKeys $station_cfg >$keyfile
}

_write_conf() {
    LoadConfig "$global_cfg" 

    if [ ! -f "$SEISCOMP_ROOT/key/global" ]; then
        echo "Cannot find $SEISCOMP_ROOT/key/global"
        return
    fi

    source "$SEISCOMP_ROOT/key/global"
    
    if [ ! -f "$SEISCOMP_ROOT/trunk/key/global" ]; then
        echo "Cannot find $SEISCOMP_ROOT/trunk/key/global"
        return
    fi
    
    source "$SEISCOMP_ROOT/trunk/key/global"
    
    if [ ! -f "key/global" ]; then
        echo "Cannot find $PKGROOT/key/global"
        return
    fi
    
    source "key/global"
    
    rm -rf config/*
    rm -rf operator/*
    mkdir -p config
    mkdir -p operator
    mkdir -p log
    mkdir -p requests
    mkdir -p reqtrack
    mkdir -p status
    
    OutputFile $(GetTemplate arclink.tpl) >config/arclink.ini
    OutputFile $(GetTemplate arclink_ctrl.tpl) >operator/arclink_ctrl
    OutputFile $(GetTemplate reqhandler.tpl) >"$SEISCOMP_ROOT/trunk/config/reqhandler.cfg"

    if [ "$SYSLOG" = yes ]; then
        FixLines operator/arclink_ctrl SY
        FixLines config/arclink.ini SY
        RemoveLines operator/arclink_ctrl NS
        RemoveLines config/arclink.ini NS
    else
        FixLines operator/arclink_ctrl NS
        FixLines config/arclink.ini NS
        RemoveLines operator/arclink_ctrl SY
        RemoveLines config/arclink.ini SY
    fi
    
    chmod a+x operator/arclink_ctrl

    if [ -n "$DATACENTER" -a -n "$MASTER_NODE" ]; then
        OutputFile $(GetTemplate autosync.tpl) >operator/autosync
        chmod a+x operator/autosync
        
        if [ -n "$SYNC_TIME" ]; then
            SYNC_HOUR="$(echo $SYNC_TIME | cut -d : -f 1)"
            SYNC_MINUTE="$(echo $SYNC_TIME | cut -d : -f 2)"
            SYNC_DAY_START=$((RANDOM/8192*7+1))
            SYNC_DAY="$SYNC_DAY_START-$((SYNC_DAY_START+6))"
            OutputFile $(GetTemplate crontab.tpl) >operator/crontab
        else
            :>operator/crontab
        fi

        AskYN DO_SYNC "Retrieve inventory data from $MASTER_NODE" "yes"
        if [ "$DO_SYNC" = yes ]; then
            operator/autosync -f
        fi

    else
        :>operator/autosync
        :>operator/crontab
        chmod a+x operator/autosync
    fi
}

_start_arclink() {
    if [ ! -f "key/global" ]; then
        echo "Cannot find $PKGROOT/key/global"
        return
    fi
    
    source "key/global"
    
    if [ "$ARCLINK" = yes ]; then
        operator/arclink_ctrl "$@"
    fi
}

_stop_arclink() {
    operator/arclink_ctrl stop
}

_setup() {
    LoadConfig "$global_cfg"

    ( if cd "$SEISCOMP_ROOT/bin"; then
        for SCRIPT_NAME in arclinktool arclink_fetch fill_db dump_db sync_db dbtool; do
            rm -f $f
            echo "creating $SEISCOMP_ROOT/bin/$SCRIPT_NAME"
            ( cd "$PKGROOT"; OutputFile "$(GetTemplate python.tpl)" ) >$SCRIPT_NAME
            chmod a+x $SCRIPT_NAME
        done
    fi )
}

action="$1"
shift

case "$action" in
    start|check)
        _start_arclink $action
        exit $?
        ;;
    stop)
        _stop_arclink
        exit $?
        ;;
    get_attributes)
        echo "globals,profile,station,advanced"
        exit 0
        ;;
    edit_globals)
        if [ $# -eq 0 ]; then
            _edit_globals
            exit 0
        fi
        ;;
    edit_profile)
        if [ $# -eq 1 ]; then
            keyfile="key/profile_$1"
            _edit_keys
            exit 0
        fi
        ;;
    edit_station)
        if [ $# -eq 2 ]; then
            keyfile="key/station_$1_$2"
            _edit_keys
            exit 0
        fi
        ;;
    write_conf)
        _write_conf
        exit 0
        ;;
    setup)
        _setup
        exit 0
        ;;
    print_crontab)
        if [ -f "operator/crontab" ]; then
            cat operator/crontab
        fi
        exit 0
        ;;
esac

echo "Error: $pkgname config hook called with invalid arguments"
exit 1

